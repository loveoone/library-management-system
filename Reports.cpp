#include <iostream> #include <fstream> #include <vector> #include <iomanip> #include <string> #include <ctime> // Structs for library data struct Book { std::string isbn; std::string title; std::string author; }; struct Member { int memberId; std::string name; }; struct Transaction { std::string isbn; int memberId; std::string borrowDate; std::string dueDate; }; // Helper function to get current date (simplified for comparison) std::string getCurrentDate() { time_t now = time(nullptr); struct tm* t = localtime(&now); char buffer[11]; strftime(buffer, sizeof(buffer), "%Y-%m-%d", t); return std::string(buffer); } // Text report void generateBorrowedBooksTextReport( const std::vector<Transaction>& transactions, const std::vector<Book>& books, const std::vector<Member>& members, const std::string& filename ) { std::ofstream outFile(filename); if (!outFile.is_open()) { std::cerr << "Error: Could not open file " << filename << std::endl; return; } // Write header outFile << std::left << std::setw(15) << "ISBN" << std::setw(30) << "Book Title" << std::setw(20) << "Member Name" << std::setw(15) << "Borrow Date" << std::setw(15) << "Due Date" << std::setw(10) << "Status" << std::endl; outFile << std::string(105, '-') << std::endl; // Write data std::string currentDate = getCurrentDate(); for (const auto& transaction : transactions) { // Find book and member details std::string bookTitle = "Unknown"; std::string memberName = "Unknown"; for (const auto& book : books) { if (book.isbn == transaction.isbn) { bookTitle = book.title; break; } } for (const auto& member : members) { if (member.memberId == transaction.memberId) { memberName = member.name; break; } } // Check if overdue std::string status = (transaction.dueDate < currentDate) ? "Overdue" : "On Time"; outFile << std::left << std::setw(15) << transaction.isbn << std::setw(30) << bookTitle << std::setw(20) << memberName << std::setw(15) << transaction.borrowDate << std::setw(15) << transaction.dueDate << std::setw(10) << status << std::endl; } outFile.close(); std::cout << "Text report generated: " << filename << std::endl; } // CSV report void generateBorrowedBooksCSVReport( const std::vector<Transaction>& transactions, const std::vector<Book>& books, const std::vector<Member>& members, const std::string& filename ) { std::ofstream outFile(filename); if (!outFile.is_open()) { std::cerr << "Error: Could not open file " << filename << std::endl; return; } // Write CSV header outFile << "ISBN,Book Title,Member Name,Borrow Date,Due Date,Status\n"; // Write data std::string currentDate = getCurrentDate(); for (const auto& transaction : transactions) { std::string bookTitle = "Unknown"; std::string memberName = "Unknown"; for (const auto& book : books) { if (book.isbn == transaction.isbn) { bookTitle = book.title; break; } } for (const auto& member : members) { if (member.memberId == transaction.memberId) { memberName = member.name; break; } } std::string status = (transaction.dueDate < currentDate) ? "Overdue" : "On Time"; outFile << transaction.isbn << "," << bookTitle << "," << memberName << "," << transaction.borrowDate << "," << transaction.dueDate << "," << status << "\n"; } outFile.close(); std::cout << "CSV report generated: " << filename << std::endl; } int main() { // Sample data std::vector<Book> books = { {"123456", "The Great Gatsby", "F. Scott Fitzgerald"}, {"789012", "1984", "George Orwell"}, {"345678", "Pride and Prejudice", "Jane Austen"} }; std::vector<Member> members = { {1, "Alice Smith"}, {2, "Bob Johnson"} }; std::vector<Transaction> transactions = { {"123456", 1, "2025-06-01", "2025-06-15"}, {"789012", 2, "2025-06-10", "2025-06-24"}, {"345678", 1, "2025-06-20", "2025-07-05"} }; // Generate reports generateBorrowedBooksTextReport(transactions, books, members, "borrowed_books.txt"); generateBorrowedBooksCSVReport(transactions, books, members, "borrowed_books.csv"); return 0; }#include <iostream> #include <fstream> #include <vector> #include <iomanip> #include <string> #include <ctime> // Structs for library data struct Book { std::string isbn; std::string title; std::string author; }; struct Member { int memberId; std::string name; }; struct Transaction { std::string isbn; int memberId; std::string borrowDate; std::string dueDate; }; // Helper function to get current date (simplified for comparison) std::string getCurrentDate() { time_t now = time(nullptr); struct tm* t = localtime(&now); char buffer[11]; strftime(buffer, sizeof(buffer), "%Y-%m-%d", t); return std::string(buffer); } // Text report void generateBorrowedBooksTextReport( const std::vector<Transaction>& transactions, const std::vector<Book>& books, const std::vector<Member>& members, const std::string& filename ) { std::ofstream outFile(filename); if (!outFile.is_open()) { std::cerr << "Error: Could not open file " << filename << std::endl; return; } // Write header outFile << std::left << std::setw(15) << "ISBN" << std::setw(30) << "Book Title" << std::setw(20) << "Member Name" << std::setw(15) << "Borrow Date" << std::setw(15) << "Due Date" << std::setw(10) << "Status" << std::endl; outFile << std::string(105, '-') << std::endl; // Write data std::string currentDate = getCurrentDate(); for (const auto& transaction : transactions) { // Find book and member details std::string bookTitle = "Unknown"; std::string memberName = "Unknown"; for (const auto& book : books) { if (book.isbn == transaction.isbn) { bookTitle = book.title; break; } } for (const auto& member : members) { if (member.memberId == transaction.memberId) { memberName = member.name; break; } } // Check if overdue std::string status = (transaction.dueDate < currentDate) ? "Overdue" : "On Time"; outFile << std::left << std::setw(15) << transaction.isbn << std::setw(30) << bookTitle << std::setw(20) << memberName << std::setw(15) << transaction.borrowDate << std::setw(15) << transaction.dueDate << std::setw(10) << status << std::endl; } outFile.close(); std::cout << "Text report generated: " << filename << std::endl; } // CSV report void generateBorrowedBooksCSVReport( const std::vector<Transaction>& transactions, const std::vector<Book>& books, const std::vector<Member>& members, const std::string& filename ) { std::ofstream outFile(filename); if (!outFile.is_open()) { std::cerr << "Error: Could not open file " << filename << std::endl; return; } // Write CSV header outFile << "ISBN,Book Title,Member Name,Borrow Date,Due Date,Status\n"; // Write data std::string currentDate = getCurrentDate(); for (const auto& transaction : transactions) { std::string bookTitle = "Unknown"; std::string memberName = "Unknown"; for (const auto& book : books) { if (book.isbn == transaction.isbn) { bookTitle = book.title; break; } } for (const auto& member : members) { if (member.memberId == transaction.memberId) { memberName = member.name; break; } } std::string status = (transaction.dueDate < currentDate) ? "Overdue" : "On Time"; outFile << transaction.isbn << "," << bookTitle << "," << memberName << "," << transaction.borrowDate << "," << transaction.dueDate << "," << status << "\n"; } outFile.close(); std::cout << "CSV report generated: " << filename << std::endl; } int main() { // Sample data std::vector<Book> books = { {"123456", "The Great Gatsby", "F. Scott Fitzgerald"}, {"789012", "1984", "George Orwell"}, {"345678", "Pride and Prejudice", "Jane Austen"} }; std::vector<Member> members = { {1, "Alice Smith"}, {2, "Bob Johnson"} }; std::vector<Transaction> transactions = { {"123456", 1, "2025-06-01", "2025-06-15"}, {"789012", 2, "2025-06-10", "2025-06-24"}, {"345678", 1, "2025-06-20", "2025-07-05"} }; // Generate reports generateBorrowedBooksTextReport(transactions, books, members, "borrowed_books.txt"); generateBorrowedBooksCSVReport(transactions, books, members, "borrowed_books.csv"); return 0; }#include <iostream> #include <fstream> #include <vector> #include <iomanip> #include <string> #include <ctime> // Structs for library data struct Book { std::string isbn; std::string title; std::string author; }; struct Member { int memberId; std::string name; }; struct Transaction { std::string isbn; int memberId; std::string borrowDate; std::string dueDate; }; // Helper function to get current date (simplified for comparison) std::string getCurrentDate() { time_t now = time(nullptr); struct tm* t = localtime(&now); char buffer[11]; strftime(buffer, sizeof(buffer), "%Y-%m-%d", t); return std::string(buffer); } // Text report void generateBorrowedBooksTextReport( const std::vector<Transaction>& transactions, const std::vector<Book>& books, const std::vector<Member>& members, const std::string& filename ) { std::ofstream outFile(filename); if (!outFile.is_open()) { std::cerr << "Error: Could not open file " << filename << std::endl; return; } // Write header outFile << std::left << std::setw(15) << "ISBN" << std::setw(30) << "Book Title" << std::setw(20) << "Member Name" << std::setw(15) << "Borrow Date" << std::setw(15) << "Due Date" << std::setw(10) << "Status" << std::endl; outFile << std::string(105, '-') << std::endl; // Write data std::string currentDate = getCurrentDate(); for (const auto& transaction : transactions) { // Find book and member details std::string bookTitle = "Unknown"; std::string memberName = "Unknown"; for (const auto& book : books) { if (book.isbn == transaction.isbn) { bookTitle = book.title; break; } } for (const auto& member : members) { if (member.memberId == transaction.memberId) { memberName = member.name; break; } } // Check if overdue std::string status = (transaction.dueDate < currentDate) ? "Overdue" : "On Time"; outFile << std::left << std::setw(15) << transaction.isbn << std::setw(30) << bookTitle << std::setw(20) << memberName << std::setw(15) << transaction.borrowDate << std::setw(15) << transaction.dueDate << std::setw(10) << status << std::endl; } outFile.close(); std::cout << "Text report generated: " << filename << std::endl; } // CSV report void generateBorrowedBooksCSVReport( const std::vector<Transaction>& transactions, const std::vector<Book>& books, const std::vector<Member>& members, const std::string& filename ) { std::ofstream outFile(filename); if (!outFile.is_open()) { std::cerr << "Error: Could not open file " << filename << std::endl; return; } // Write CSV header outFile << "ISBN,Book Title,Member Name,Borrow Date,Due Date,Status\n"; // Write data std::string currentDate = getCurrentDate(); for (const auto& transaction : transactions) { std::string bookTitle = "Unknown"; std::string memberName = "Unknown"; for (const auto& book : books) { if (book.isbn == transaction.isbn) { bookTitle = book.title; break; } } for (const auto& member : members) { if (member.memberId == transaction.memberId) { memberName = member.name; break; } } std::string status = (transaction.dueDate < currentDate) ? "Overdue" : "On Time"; outFile << transaction.isbn << "," << bookTitle << "," << memberName << "," << transaction.borrowDate << "," << transaction.dueDate << "," << status << "\n"; } outFile.close(); std::cout << "CSV report generated: " << filename << std::endl; } int main() { // Sample data std::vector<Book> books = { {"123456", "The Great Gatsby", "F. Scott Fitzgerald"}, {"789012", "1984", "George Orwell"}, {"345678", "Pride and Prejudice", "Jane Austen"} }; std::vector<Member> members = { {1, "Alice Smith"}, {2, "Bob Johnson"} }; std::vector<Transaction> transactions = { {"123456", 1, "2025-06-01", "2025-06-15"}, {"789012", 2, "2025-06-10", "2025-06-24"}, {"345678", 1, "2025-06-20", "2025-07-05"} }; // Generate reports generateBorrowedBooksTextReport(transactions, books, members, "borrowed_books.txt"); generateBorrowedBooksCSVReport(transactions, books, members, "borrowed_books.csv"); return 0; }#include <iostream> #include <fstream> #include <vector> #include <iomanip> #include <string> #include <ctime> // Structs for library data struct Book { std::string isbn; std::string title; std::string author; }; struct Member { int memberId; std::string name; }; struct Transaction { std::string isbn; int memberId; std::string borrowDate; std::string dueDate; }; // Helper function to get current date (simplified for comparison) std::string getCurrentDate() { time_t now = time(nullptr); struct tm* t = localtime(&now); char buffer[11]; strftime(buffer, sizeof(buffer), "%Y-%m-%d", t); return std::string(buffer); } // Text report void generateBorrowedBooksTextReport( const std::vector<Transaction>& transactions, const std::vector<Book>& books, const std::vector<Member>& members, const std::string& filename ) { std::ofstream outFile(filename); if (!outFile.is_open()) { std::cerr << "Error: Could not open file " << filename << std::endl; return; } // Write header outFile << std::left << std::setw(15) << "ISBN" << std::setw(30) << "Book Title" << std::setw(20) << "Member Name" << std::setw(15) << "Borrow Date" << std::setw(15) << "Due Date" << std::setw(10) << "Status" << std::endl; outFile << std::string(105, '-') << std::endl; // Write data std::string currentDate = getCurrentDate(); for (const auto& transaction : transactions) { // Find book and member details std::string bookTitle = "Unknown"; std::string memberName = "Unknown"; for (const auto& book : books) { if (book.isbn == transaction.isbn) { bookTitle = book.title; break; } } for (const auto& member : members) { if (member.memberId == transaction.memberId) { memberName = member.name; break; } } // Check if overdue std::string status = (transaction.dueDate < currentDate) ? "Overdue" : "On Time"; outFile << std::left << std::setw(15) << transaction.isbn << std::setw(30) << bookTitle << std::setw(20) << memberName << std::setw(15) << transaction.borrowDate << std::setw(15) << transaction.dueDate << std::setw(10) << status << std::endl; } outFile.close(); std::cout << "Text report generated: " << filename << std::endl; } // CSV report void generateBorrowedBooksCSVReport( const std::vector<Transaction>& transactions, const std::vector<Book>& books, const std::vector<Member>& members, const std::string& filename ) { std::ofstream outFile(filename); if (!outFile.is_open()) { std::cerr << "Error: Could not open file " << filename << std::endl; return; } // Write CSV header outFile << "ISBN,Book Title,Member Name,Borrow Date,Due Date,Status\n"; // Write data std::string currentDate = getCurrentDate(); for (const auto& transaction : transactions) { std::string bookTitle = "Unknown"; std::string memberName = "Unknown"; for (const auto& book : books) { if (book.isbn == transaction.isbn) { bookTitle = book.title; break; } } for (const auto& member : members) { if (member.memberId == transaction.memberId) { memberName = member.name; break; } } std::string status = (transaction.dueDate < currentDate) ? "Overdue" : "On Time"; outFile << transaction.isbn << "," << bookTitle << "," << memberName << "," << transaction.borrowDate << "," << transaction.dueDate << "," << status << "\n"; } outFile.close(); std::cout << "CSV report generated: " << filename << std::endl; } int main() { // Sample data std::vector<Book> books = { {"123456", "The Great Gatsby", "F. Scott Fitzgerald"}, {"789012", "1984", "George Orwell"}, {"345678", "Pride and Prejudice", "Jane Austen"} }; std::vector<Member> members = { {1, "Alice Smith"}, {2, "Bob Johnson"} }; std::vector<Transaction> transactions = { {"123456", 1, "2025-06-01", "2025-06-15"}, {"789012", 2, "2025-06-10", "2025-06-24"}, {"345678", 1, "2025-06-20", "2025-07-05"} }; // Generate reports generateBorrowedBooksTextReport(transactions, books, members, "borrowed_books.txt"); generateBorrowedBooksCSVReport(transactions, books, members, "borrowed_books.csv"); return 0; }#include <iostream> #include <fstream> #include <vector> #include <iomanip> #include <string> #include <ctime> // Structs for library data struct Book { std::string isbn; std::string title; std::string author; }; struct Member { int memberId; std::string name; }; struct Transaction { std::string isbn; int memberId; std::string borrowDate; std::string dueDate; }; // Helper function to get current date (simplified for comparison) std::string getCurrentDate() { time_t now = time(nullptr); struct tm* t = localtime(&now); char buffer[11]; strftime(buffer, sizeof(buffer), "%Y-%m-%d", t); return std::string(buffer); } // Text report void generateBorrowedBooksTextReport( const std::vector<Transaction>& transactions, const std::vector<Book>& books, const std::vector<Member>& members, const std::string& filename ) { std::ofstream outFile(filename); if (!outFile.is_open()) { std::cerr << "Error: Could not open file " << filename << std::endl; return; } // Write header outFile << std::left << std::setw(15) << "ISBN" << std::setw(30) << "Book Title" << std::setw(20) << "Member Name" << std::setw(15) << "Borrow Date" << std::setw(15) << "Due Date" << std::setw(10) << "Status" << std::endl; outFile << std::string(105, '-') << std::endl; // Write data std::string currentDate = getCurrentDate(); for (const auto& transaction : transactions) { // Find book and member details std::string bookTitle = "Unknown"; std::string memberName = "Unknown"; for (const auto& book : books) { if (book.isbn == transaction.isbn) { bookTitle = book.title; break; } } for (const auto& member : members) { if (member.memberId == transaction.memberId) { memberName = member.name; break; } } // Check if overdue std::string status = (transaction.dueDate < currentDate) ? "Overdue" : "On Time"; outFile << std::left << std::setw(15) << transaction.isbn << std::setw(30) << bookTitle << std::setw(20) << memberName << std::setw(15) << transaction.borrowDate << std::setw(15) << transaction.dueDate << std::setw(10) << status << std::endl; } outFile.close(); std::cout << "Text report generated: " << filename << std::endl; } // CSV report void generateBorrowedBooksCSVReport( const std::vector<Transaction>& transactions, const std::vector<Book>& books, const std::vector<Member>& members, const std::string& filename ) { std::ofstream outFile(filename); if (!outFile.is_open()) { std::cerr << "Error: Could not open file " << filename << std::endl; return; } // Write CSV header outFile << "ISBN,Book Title,Member Name,Borrow Date,Due Date,Status\n"; // Write data std::string currentDate = getCurrentDate(); for (const auto& transaction : transactions) { std::string bookTitle = "Unknown"; std::string memberName = "Unknown"; for (const auto& book : books) { if (book.isbn == transaction.isbn) { bookTitle = book.title; break; } } for (const auto& member : members) { if (member.memberId == transaction.memberId) { memberName = member.name; break; } } std::string status = (transaction.dueDate < currentDate) ? "Overdue" : "On Time"; outFile << transaction.isbn << "," << bookTitle << "," << memberName << "," << transaction.borrowDate << "," << transaction.dueDate << "," << status << "\n"; } outFile.close(); std::cout << "CSV report generated: " << filename << std::endl; } int main() { // Sample data std::vector<Book> books = { {"123456", "The Great Gatsby", "F. Scott Fitzgerald"}, {"789012", "1984", "George Orwell"}, {"345678", "Pride and Prejudice", "Jane Austen"} }; std::vector<Member> members = { {1, "Alice Smith"}, {2, "Bob Johnson"} }; std::vector<Transaction> transactions = { {"123456", 1, "2025-06-01", "2025-06-15"}, {"789012", 2, "2025-06-10", "2025-06-24"}, {"345678", 1, "2025-06-20", "2025-07-05"} }; // Generate reports generateBorrowedBooksTextReport(transactions, books, members, "borrowed_books.txt"); generateBorrowedBooksCSVReport(transactions, books, members, "borrowed_books.csv"); return 0; }
